---
import navData from "../../../data/navigation.json";
import styles from "./Header.module.css";
import { NavigationSchema, type Mode } from "../../content/sassdoc-schema";
import { getConfig } from "../../utils";
import { getLangFromEnv, useTranslations } from "../../i18n";

const lang = getLangFromEnv();
const mode = import.meta.env.MODE as Mode;
const t = useTranslations(lang);

const { url: baseUrl } = getConfig(lang, mode);
const { header } = NavigationSchema.parse(navData);
---

<div class="main-head" class={styles.container}>
  <Fragment set:html={header} />

  <div class={styles.secondaryHead}>
    <section class={styles.secondaryHead__section}>
      <h5 class={styles.secondaryHead__title}>Ignite UI for Angular</h5>

      <select class={styles.secondaryHead__select} id="version-selector">
      </select>
    </section>

    <section class={styles.secondaryHead__section}>
      <a
        tabindex="0"
        href=`${baseUrl}/products/ignite-ui-angular`
        class={styles.secondaryHead__button}
        data-type="flat"
        target="_blank"
      >
        {t("header.actions.components")}
      </a>
      <a
        tabindex="0"
        href=`${baseUrl}/products/ignite-ui-angular/getting-started/`
        class={styles.secondaryHead__button}
        data-type="contained"
        target="_blank"
      >
        {t("header.actions.get-started")}
      </a>
    </section>
  </div>
</div>
<script>
  const select = document.querySelector("#version-selector") as HTMLSelectElement;

  interface Version {
    version: string;
    url: string;
  }

  interface VersionsResponse {
    versions: Version[];
  }

  async function loadVersions(): Promise<void> {
    try {
      const response = await fetch("/api/versions");

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const { versions }: VersionsResponse = await response.json();

      select.innerHTML = versions
        .map(({ version, url }: Version) => `<option value="${url}">${version}</option>`)
        .join("");
    } catch (error) {
      console.error("Failed to fetch versions:", error);
      select.innerHTML = '<option value="#">Error loading versions</option>';
    }
  }

  loadVersions();

  select.addEventListener("change", () => {
    const url = select.value;
    if (url && url !== "#") {
      window.location.assign(url);
    }
  });
</script>
