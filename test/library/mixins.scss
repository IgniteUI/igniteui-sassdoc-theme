////
/// @package theming
/// @group themes
////

/// A list of ignored keywords to be excluded when generating CSS variables for a theme.
/// @access private
$ignored-keys: ('name', 'palette', 'variant', 'selector', 'type', 'theme', 'typography', '_meta');

/// Parses a map of key value pairs from component themes to css variables.
/// @access private
/// @param {Map} $theme - The component theme to be used to generate css variables.
/// @param {String} $name - The CSS variables name
/// @param {Map} $ignored [$ignored-keys] - A list of ignored keywords to be excluded when generating CSS variables
/// @example scss Convert theme colors to CSS variables.
///   $theme: digest-schema((background: color(primary, 500), foreground: contrast-color(color, 500));
///   :root {
///     @include css-vars-from-theme($theme);
///   }
/// @require {mixin} css-vars
@mixin css-vars-from-theme($theme, $name, $ignored: $ignored-keys) {
    $themes: map.get($theme, 'themes');
    $prefix: map.get($theme, 'prefix');
    $t: map.get($theme, '_meta', 'theme');

    // This is here only because the button theme consists of 4 nested themes.
    @if $themes and meta.type-of($themes) == 'map' {
        @each $theme in $themes {
            @include css-vars(list.nth($theme, 2));
        }
    }

    @each $key, $value in map.remove($theme, $ignored...) {
        $variable: if($prefix, #{$prefix}-#{$key}, #{$key});

        @if meta.type-of($value) != 'map' and $key != 'prefix' {
            --#{$variable}: var(--#{$name}-#{$key}, #{$value});
        }
    }

    @if $t and meta.type-of($t) == 'string' {
        --ig-theme: #{$t};
    }
}
